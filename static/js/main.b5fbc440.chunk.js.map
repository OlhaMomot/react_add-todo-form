{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","utils/helperFunctions.ts","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","completed","title","classNames","TodoList","todos","map","findUserById","users","userId","find","preparedTodos","usersFromServer","App","useState","setTitle","hasTitleError","setHasTitleError","setUserId","hasUserIdError","setHasUserIdError","setTodos","action","method","onSubmit","event","preventDefault","todoIds","newTodo","Math","max","currentTodos","htmlFor","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b5fbc440.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { PreparedTodo } from '../../types';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: PreparedTodo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    completed,\n    title,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user\n      && <UserInfo user={user} />}\n\n    </article>\n  );\n};\n","import React from 'react';\nimport { PreparedTodo } from '../../types';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: PreparedTodo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          data-id={todo.id}\n          todo={todo}\n          key={todo.id}\n        />\n      ))}\n    </section>\n  );\n};\n","import { User } from '../types';\n\nexport function findUserById(users: User[], userId: number): User | undefined {\n  return users.find(({ id }) => id === userId);\n}\n","import React, { useState } from 'react';\n\nimport './App.scss';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { PreparedTodo } from './types/Todo';\nimport { findUserById } from './utils/helperFunctions';\n\nconst preparedTodos: PreparedTodo[] = todosFromServer.map((todo) => {\n  const { userId } = todo;\n  const user = findUserById(usersFromServer, userId);\n\n  return {\n    ...todo,\n    user,\n  };\n});\n\nexport const App: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  const [userId, setUserId] = useState(0);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n\n  const [todos, setTodos] = useState(preparedTodos);\n\n  function handleTitleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setTitle(event.target.value);\n    setHasTitleError(false);\n  }\n\n  function handleUserIdSelect(event: React.ChangeEvent<HTMLSelectElement>) {\n    setUserId(+event.target.value);\n    setHasUserIdError(false);\n  }\n\n  function clearFields() {\n    setTitle('');\n    setUserId(0);\n  }\n\n  function handleAddTodo(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    setHasTitleError(!title);\n    setHasUserIdError(!userId);\n\n    if (!title || !userId) {\n      return;\n    }\n\n    const user = findUserById(usersFromServer, userId);\n    const todoIds = todos.map(({ id }) => id);\n    const maxId = Math.max(...todoIds);\n\n    const newTodo = {\n      id: maxId + 1,\n      title,\n      completed: false,\n      userId,\n      user,\n    };\n\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n    clearFields();\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleAddTodo}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            id=\"title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleTitleChange}\n          />\n          {hasTitleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"user\"\n            value={userId}\n            onChange={handleUserIdSelect}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(({ name, id }) => {\n              return (\n                <option\n                  key={id}\n                  value={id}\n                >\n                  {name}\n                </option>\n              );\n            })}\n          </select>\n\n          {hasUserIdError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}